import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# --- Config ---
ADMIN_IDS = [7409502548]  # <-- –ó–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Å–≤—ñ–π —Ä–µ–∞–ª—å–Ω–∏–π Telegram ID

import os
TOKEN = os.getenv("TOKEN")

# --- Logging ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# --- Start Command ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì¶ –ü–ª–∞–Ω–∏ –ø—ñ–¥–ø–∏—Å–∫–∏", callback_data="plans")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(
            "‚ú® <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ VIP-–∑–æ–Ω–∏</b> ‚ú®\n\n"
            "–ü—Ä–∏–≤—ñ—Ç üëã –†–∞–¥—ñ —Ç–µ–±–µ –±–∞—á–∏—Ç–∏ —Ç—É—Ç!\n"
            "–û–∑–Ω–∞–π–æ–º—Å—è –∑ –Ω–∞—à–∏–º–∏ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–æ—Å—Ç—É–ø—É –Ω–∏–∂—á–µ:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            "‚ú® <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ VIP-–∑–æ–Ω–∏</b> ‚ú®\n\n"
            "–ü—Ä–∏–≤—ñ—Ç üëã –†–∞–¥—ñ —Ç–µ–±–µ –±–∞—á–∏—Ç–∏ —Ç—É—Ç!\n"
            "–û–∑–Ω–∞–π–æ–º—Å—è –∑ –Ω–∞—à–∏–º–∏ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–æ—Å—Ç—É–ø—É –Ω–∏–∂—á–µ:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

# --- Send Plans ---
async def send_plans(chat_id, bot):
    keyboard = [
        [InlineKeyboardButton("ü•â –û–±—Ä–∞—Ç–∏ BASE", callback_data="select_base")],
        [InlineKeyboardButton("ü•à –û–±—Ä–∞—Ç–∏ VIP", callback_data="select_vip")],
        [InlineKeyboardButton("ü•á –û–±—Ä–∞—Ç–∏ VIP+", callback_data="select_vipplus")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_from_plans")]
    ]
    await bot.send_message(
        chat_id=chat_id,
        text=(
            "üíé <b>–ü–∞–∫–µ—Ç–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ VIP-–∫–æ–Ω—Ç–µ–Ω—Ç—É</b> üíé\n\n"
            "ü•â <b>BASE</b> ‚Äî <b>80‚Ç¥</b>\n"
            "   üì¶ –ë–∞–∑–æ–≤–∏–π –Ω–∞–±—ñ—Ä –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
            "   üå∏ –ù—ñ–∂–Ω—ñ –æ–±—Ä–∞–∑–∏ –±–µ–∑ –∑–∞–π–≤–æ–≥–æ\n\n"
            "ü•à <b>VIP</b> ‚Äî <b>250‚Ç¥</b>\n"
            "   üî• –ë—ñ–ª—å—à–µ –≤—ñ–¥–≤–µ—Ä—Ç–æ—Å—Ç—ñ —Ç–∞ –µ—Å—Ç–µ—Ç–∏–∫–∏\n"
            "   üé• –ë–æ–Ω—É—Å: –∫–æ—Ä–æ—Ç–∫–µ –≤—ñ–¥–µ–æ-—Å—é—Ä–ø—Ä–∏–∑\n\n"
            "ü•á <b>VIP+</b> ‚Äî <b>500‚Ç¥</b>\n"
            "   üí´ –ü–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å\n"
            "   üéûÔ∏è –ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ —Ñ–æ—Ç–æ —ñ –≤—ñ–¥–µ–æ, —è–∫–∏—Ö –Ω–µ–º–∞—î –Ω—ñ–¥–µ\n\n"
            "‚ÑπÔ∏è <i>–û–±–µ—Ä–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å —ñ –ø–µ—Ä–µ—Ö–æ–¥—å –¥–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –æ–ø–ª–∞—Ç—ñ.</i>"
        ),
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- Callback Handler ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "plans":
        await send_plans(query.message.chat_id, context.bot)

    elif query.data == "back_from_plans":
        await start(update, context)

    elif query.data == "back_from_package":
        await send_plans(query.message.chat_id, context.bot)

    elif query.data.startswith("select_"):
        level = query.data.split("_")[1]
        payment_info = {
            "base": ("80‚Ç¥", "ü•â BASE", "AgACAgIAAxkBAAMtaDdcQrO2yK0aqIInTDOhoAIDmxQAAkX6MRs19blJI4Te4Kkdyg8BAAMCAAN3AAM2BA"),
            "vip": ("250‚Ç¥", "ü•à VIP", "AgACAgIAAxkBAAM8aDddkvFoS1yqq6cAAZBi6Tch0VhCAAJM-jEbNfW5Sdl1sj_dsdraAQADAgADeAADNgQ"),
            "vipplus": ("500‚Ç¥", "ü•á VIP+", "AgACAgIAAxkBAAM-aDddsqheZlNKjKDdn9oyEulJwSwAAk36MRs19blJNRe0eFLDDagBAAMCAAN4AAM2BA")
        }
        amount, label, file_id = payment_info[level]
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_from_package")]]
        await query.edit_message_media(
            media=InputMediaPhoto(
                media=file_id,
                caption=(
                    f"üîê –¢–∏ –æ–±—Ä–∞–≤ {label}\n"
                    f"üí∏ –í–∞—Ä—Ç—ñ—Å—Ç—å: {amount}\n\n"
                    f"‚ÑπÔ∏è –ù–∞–¥—ñ—à–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–∞—Ä—Ç—É: <code>4483 8200 3220 0296</code>\n"
                    "–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —É —Ü–µ–π –±–æ—Ç."
                ),
                parse_mode="HTML"
            ),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# --- Photo Handler ---
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    caption = f"üì• –ù–æ–≤–∞ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—è –≤—ñ–¥ @{user.username or user.first_name} (ID: {user.id})"

    for admin_id in ADMIN_IDS:
        await context.bot.forward_message(chat_id=admin_id, from_chat_id=update.message.chat_id, message_id=update.message.message_id)
        keyboard = [[InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{user.id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=admin_id, text=caption, reply_markup=reply_markup)

    await update.message.reply_text("‚úÖ –î—è–∫—É—é, —á–µ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ! –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó.")

# --- Confirm Handler ---
async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split("_")[1])
    await context.bot.send_message(chat_id=user_id, text="üéâ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞! –û—Å—å —Ç–≤—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∞–±–æ –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–Ω–∞–ª—É:")
    await query.edit_message_text("‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")

# --- Get File ID ---
async def capture_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file_id = photo.file_id
    await update.message.reply_text(f"file_id: <code>{file_id}</code>", parse_mode='HTML')

# --- Main ---
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback, pattern="^(plans|select_base|select_vip|select_vipplus|back_from_plans|back_from_package)$"))
app.add_handler(CallbackQueryHandler(confirm_payment, pattern="^confirm_\\d+$"))
app.add_handler(MessageHandler(filters.PHOTO & filters.CaptionRegex("^/get_id$"), capture_file_id))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

if __name__ == '__main__':
    print("Bot is running...")
    app.run_polling()
